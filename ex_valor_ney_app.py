# -*- coding: utf-8 -*-
"""EX_VALOR_NEY_APP

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TOf30Gqpk1H6kD7NrAR9HPSVvLrJkfsI
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# --- CONFIGURA√á√ÉO DA P√ÅGINA (DEVE SER A PRIMEIRA CHAMADA STREAMLIT) ---
st.set_page_config(
    page_title="Neymar: Evolu√ß√£o do Valor de Mercado",
    layout="wide",
    initial_sidebar_state="expanded"
)

#Dados Hist√≥ricos de Valor de Mercado (Simulados/Manual)
neymar_market_value_data = [
    # Santos (2009-2013)
    {"Date": "2009-07-23", "Market_Value_EUR_M": 1.0, "Club": "Santos"},
    {"Date": "2010-06-10", "Market_Value_EUR_M": 15.0, "Club": "Santos"},
    {"Date": "2011-06-29", "Market_Value_EUR_M": 30.0, "Club": "Santos"},
    {"Date": "2012-08-01", "Market_Value_EUR_M": 50.0, "Club": "Santos"},
    {"Date": "2013-03-20", "Market_Value_EUR_M": 50.0, "Club": "Santos"},
    # Barcelona (2013-2017) - In√≠cio no clube em 01/07/2013
    {"Date": "2013-09-02", "Market_Value_EUR_M": 50.0, "Club": "Barcelona"},
    {"Date": "2014-06-10", "Market_Value_EUR_M": 70.0, "Club": "Barcelona"},
    {"Date": "2015-02-09", "Market_Value_EUR_M": 80.0, "Club": "Barcelona"},
    {"Date": "2015-07-01", "Market_Value_EUR_M": 100.0, "Club": "Barcelona"},
    {"Date": "2016-03-17", "Market_Value_EUR_M": 100.0, "Club": "Barcelona"},
    {"Date": "2017-01-20", "Market_Value_EUR_M": 100.0, "Club": "Barcelona"},
    {"Date": "2017-06-26", "Market_Value_EUR_M": 100.0, "Club": "Barcelona"}, # √öltimo valor no Bar√ßa
    # Paris SG (2017-2023) - In√≠cio no clube em 03/08/2017
    {"Date": "2017-08-03", "Market_Value_EUR_M": 150.0, "Club": "Paris SG"},
    {"Date": "2018-01-24", "Market_Value_EUR_M": 180.0, "Club": "Paris SG"}, # Pico de valor
    {"Date": "2018-05-29", "Market_Value_EUR_M": 180.0, "Club": "Paris SG"},
    {"Date": "2018-12-17", "Market_Value_EUR_M": 180.0, "Club": "Paris SG"},
    {"Date": "2019-06-12", "Market_Value_EUR_M": 180.0, "Club": "Paris SG"},
    {"Date": "2019-12-18", "Market_Value_EUR_M": 160.0, "Club": "Paris SG"},
    {"Date": "2020-04-08", "Market_Value_EUR_M": 128.0, "Club": "Paris SG"},
    {"Date": "2020-10-12", "Market_Value_EUR_M": 128.0, "Club": "Paris SG"},
    {"Date": "2021-06-25", "Market_Value_EUR_M": 100.0, "Club": "Paris SG"},
    {"Date": "2022-03-24", "Market_Value_EUR_M": 90.0, "Club": "Paris SG"},
    {"Date": "2022-11-07", "Market_Value_EUR_M": 75.0, "Club": "Paris SG"},
    {"Date": "2023-03-27", "Market_Value_EUR_M": 70.0, "Club": "Paris SG"},
    {"Date": "2023-06-20", "Market_Value_EUR_M": 60.0, "Club": "Paris SG"}, # √öltimo valor no PSG
    # Al-Hilal (2023-2024) - In√≠cio no clube em 15/08/2023
    {"Date": "2023-08-15", "Market_Value_EUR_M": 60.0, "Club": "Al-Hilal"},
    {"Date": "2023-12-14", "Market_Value_EUR_M": 45.0, "Club": "Al-Hilal"},
    {"Date": "2024-03-25", "Market_Value_EUR_M": 30.0, "Club": "Al-Hilal"},
    {"Date": "2024-06-15", "Market_Value_EUR_M": 25.0, "Club": "Al-Hilal"},
    {"Date": "2024-09-20", "Market_Value_EUR_M": 20.0, "Club": "Al-Hilal"},
    {"Date": "2024-12-13", "Market_Value_EUR_M": 15.0, "Club": "Santos"} # Retorno ao Santos, valor atual.
]

df_market_value = pd.DataFrame(neymar_market_value_data)
df_market_value['Date'] = pd.to_datetime(df_market_value['Date']) # Converte a coluna 'Date' para datetime

# Define as datas de in√≠cio e fim em cada clube (para usar como anota√ß√µes no gr√°fico)
club_periods = {
    "Santos": {"start": "2009-01-01", "end": "2013-06-30", "color": "green"},
    "Barcelona": {"start": "2013-07-01", "end": "2017-08-02", "color": "blue"},
    "Paris SG": {"start": "2017-08-03", "end": "2023-08-14", "color": "red"},
    "Al-Hilal": {"start": "2023-08-15", "end": "2024-12-31", "color": "purple"}, # Estende at√© o final de 2024 para mostrar tend√™ncia
}
# Certifica que as datas de club_periods tamb√©m s√£o datetime
for club, period in club_periods.items():
    club_periods[club]["start"] = pd.to_datetime(period["start"])
    club_periods[club]["end"] = pd.to_datetime(period["end"])

# Fun√ß√£o principal do Streamlit
def main():
    st.title("üí∏ Neymar Jr.: Evolu√ß√£o do Valor de Mercado ao Longo da Carreira")
    st.markdown("""
    Esta aplica√ß√£o compara a evolu√ß√£o do valor de mercado do Neymar Jr. em seus principais clubes,
    com base em dados hist√≥ricos.
    """)

    st.sidebar.header("Filtros e Visualiza√ß√£o")
    selected_clubs = st.sidebar.multiselect(
        "Selecione os Clubes para Comparar:",
        options=df_market_value['Club'].unique().tolist(),
        default=df_market_value['Club'].unique().tolist()
    )

    if not selected_clubs:
        st.warning("Por favor, selecione ao menos um clube para exibir a an√°lise.")
        return

    df_filtered = df_market_value[df_market_value['Club'].isin(selected_clubs)]

    st.header("Hist√≥rico do Valor de Mercado")
    st.markdown("Veja os dados brutos da evolu√ß√£o do valor de mercado do Neymar.")

    st.dataframe(df_filtered.sort_values(by='Date').set_index('Date').style.format({"Market_Value_EUR_M": "‚Ç¨{:,.2f}M"}))

    st.markdown("---")

    # --- IN√çCIO DOS AJUSTES PARA O ESTILO "GDP over time" ---

    # Configura√ß√µes de tema do Seaborn e Matplotlib para um visual escuro
    # As cores espec√≠ficas e o fundo escuro geralmente s√£o alcan√ßados com estilo 'darkgrid' ou 'dark'
    # e uma paleta de cores adequada para fundo escuro.
    sns.set_theme(style="darkgrid", rc={"axes.facecolor": "#1C1C1C", "figure.facecolor": "#1C1C1C",
                                        "text.color": "white", "axes.labelcolor": "white",
                                        "xtick.color": "white", "ytick.color": "white",
                                        "grid.color": "#4A4A4A", "legend.facecolor": "#1C1C1C",
                                        "legend.edgecolor": "#1C1C1C", "figure.edgecolor": "#1C1C1C",
                                        "patch.edgecolor": "#1C1C1C"}) # Fundo quase preto
    # Usar uma paleta de cores que se destaque em fundo escuro
    # 'tab10' √© uma boa op√ß√£o para cores distintas, ou 'viridis' para transi√ß√µes
    custom_palette = sns.color_palette("tab10", len(df_filtered['Club'].unique())) # Garante cores distintas para clubes
    if len(selected_clubs) > 0: # Para garantir que a paleta seja definida apenas se houver clubes selecionados
        club_colors = {
            "Santos": custom_palette[0], # Exemplo, voc√™ pode mapear cores espec√≠ficas
            "Barcelona": custom_palette[1],
            "Paris SG": custom_palette[2],
            "Al-Hilal": custom_palette[3]
        }
        # Se quiser cores fixas e controladas como no seu exemplo:
        club_colors = {
            "Santos": "#7e57c2",    # Roxo (similar ao do seu GDP)
            "Barcelona": "#2196f3", # Azul
            "Paris SG": "#ef5350",  # Vermelho
            "Al-Hilal": "#009688"   # Verde-√°gua (similar ao do seu GDP)
        }
        # A legenda da linha ir√° usar as cores do hue='Club' automaticamente do Seaborn
        # Se voc√™ quiser que as linhas de transi√ß√£o sigam a mesma paleta, precisar√° ajustar o club_periods['color']

    fig, ax = plt.subplots(figsize=(14, 7))

    # Plota o gr√°fico de linha com Seaborn
    # Passamos a paleta espec√≠fica para manter as cores consistentes
    sns.lineplot(data=df_filtered, x='Date', y='Market_Value_EUR_M', hue='Club', marker='o',
                 linewidth=2.5, ax=ax, markersize=8, palette=club_colors) # Usando as cores customizadas

    # Ajusta os ticks do eixo Y para ter menos zeros (similar ao GDP over time)
    # Isso requer um Formatter do Matplotlib
    from matplotlib.ticker import FuncFormatter
    def currency_formatter(x, pos):
        return f'{int(x):,}' # Formata com v√≠rgulas para milhares

    ax.yaxis.set_major_formatter(FuncFormatter(currency_formatter))


    # Adiciona linhas verticais para indicar as transi√ß√µes de clube
    # Usando as cores fixas para as linhas de transi√ß√£o
    # Certifique-se que o club_periods['color'] corresponda √†s cores desejadas no fundo escuro
    club_periods_colors = { # Cores das linhas de transi√ß√£o, um pouco mais vis√≠veis em fundo escuro
        "Santos": "limegreen",
        "Barcelona": "dodgerblue",
        "Paris SG": "orangered",
        "Al-Hilal": "darkorchid",
    }
    for club, period in club_periods.items():
        if club in selected_clubs:
            # Pega a cor do dicion√°rio de cores de per√≠odo
            line_color = club_periods_colors.get(club, "gray") # Pega a cor mapeada, ou cinza padr√£o
            ax.axvline(x=period["start"], color=line_color, linestyle=':', linewidth=2,
                       label=f"In√≠cio no {club}", zorder=0)

    # T√≠tulo do gr√°fico (mais simples e impactante como no exemplo)
    ax.set_title('Evolu√ß√£o do Valor de Mercado de Neymar', fontsize=24, fontweight='bold', color='white', loc='left', pad=20) # loc='left' para alinhar √† esquerda
    ax.text(ax.get_xlim()[0], ax.get_ylim()[1] * 1.05, 'em milh√µes de ‚Ç¨',
            fontsize=16, color='#AAAAAA', ha='left', va='bottom', transform=ax.transAxes) # Texto abaixo do t√≠tulo

    # Remove os r√≥tulos do eixo X e Y (como no exemplo GDP)
    ax.set_xlabel('')
    ax.set_ylabel('')

    # Ajusta os ticks do eixo X para mostrar apenas o ano, similar ao exemplo
    ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%Y'))
    ax.xaxis.set_major_locator(plt.matplotlib.dates.YearLocator(base=5)) # Marcas a cada 5 anos
    ax.tick_params(axis='x', rotation=0) # Ticks retos

    # A legenda no canto inferior direito e compacta, como no exemplo
    # A legenda ser√° um pouco mais complexa porque temos os clubes e as linhas de transi√ß√£o
    # Podemos criar duas legendas ou combinar. Para simplificar, vou criar uma legenda para as linhas de clubes.
    # E para as linhas de transi√ß√£o, podemos ajustar o label diretamente no axvline e deixar que elas se juntem na legenda.

    # Combina as legendas de clubes e linhas de transi√ß√£o
    # A legenda de sns.lineplot j√° √© gerada. Vamos captur√°-la.
    # Para as linhas verticais, usamos `label` no axvline e Matplotlib as adicionar√° automaticamente se n√£o houver um `hue` pr√©vio
    # O truque √© que o seaborn lineplot j√° cria a sua pr√≥pria legenda.
    # Vamos criar as legendas manualmente para ter controle total:
    lines, labels = ax.get_legend_handles_labels()
    # Separar os labels para os clubes e para as linhas de transi√ß√£o
    club_lines = [line for i, line in enumerate(lines) if "In√≠cio no" not in labels[i]]
    club_labels = [label for i, label in enumerate(labels) if "In√≠cio no" not in labels[i]]
    transition_lines = [line for i, line in enumerate(lines) if "In√≠cio no" in labels[i]]
    transition_labels = [label for i, label in enumerate(labels) if "In√≠cio no" in labels[i]]

    # Primeiro a legenda dos clubes
    legend1 = ax.legend(club_lines, club_labels, title='Clube', fontsize=12, title_fontsize=14, loc='lower left',
                       bbox_to_anchor=(0, -0.2), ncol=len(club_labels), frameon=False, labelspacing=0.5, columnspacing=1)
    ax.add_artist(legend1) # Adiciona a primeira legenda de volta ao gr√°fico

    # Depois a legenda das transi√ß√µes, abaixo da primeira
    # Note: bbox_to_anchor ter√° que ser ajustado para n√£o sobrepor
    legend2 = ax.legend(transition_lines, transition_labels, title='', fontsize=12, loc='lower left',
                        bbox_to_anchor=(0, -0.35), ncol=len(transition_labels), frameon=False, labelspacing=0.5, columnspacing=1)


    ax.grid(True, linestyle='-', alpha=0.2) # Grade mais suave e s√≥lida
    sns.despine(ax=ax, top=True, right=True, left=True, bottom=True) # Remove todas as bordas para um visual mais limpo

    # Ajusta o layout para que a legenda n√£o corte o gr√°fico
    fig.tight_layout(rect=[0, 0.15, 1, 1]) # Ajusta a √°rea da figura para acomodar a legenda abaixo

    st.pyplot(fig)

    st.markdown("---")
    st.header("An√°lise dos Valores")
    st.markdown("""
    * **Pico de Valor:** Observe quando o valor de mercado atingiu seu √°pice e em qual per√≠odo/clube isso ocorreu.
    * **Tend√™ncias:** Analise as tend√™ncias de alta e baixa do valor de mercado ao longo dos anos e como elas se correlacionam com as mudan√ßas de clube.
    * **Impacto das Transfer√™ncias:** Identifique se houve um impacto imediato no valor de mercado ap√≥s grandes transfer√™ncias (como para o PSG).
    """)

    st.info("""
    **Observa√ß√£o Importante:** Os dados de valor de mercado s√£o **simulados** para fins de demonstra√ß√£o,
    baseados em observa√ß√µes visuais do gr√°fico do Transfermarkt. Para um projeto real,
    seria ideal coletar esses dados de forma mais precisa (ex: raspagem de dados permitida ou acesso a API)
    para garantir a exatid√£o da an√°lise. A flutua√ß√£o de valor de mercado pode ser influenciada por muitos fatores,
    incluindo desempenho, les√µes, idade, dura√ß√£o do contrato, etc.
    """)

    st.markdown("""
    Este aplicativo serve como uma prova de conceito para visualizar a trajet√≥ria de valor de um jogador
    ao longo de sua carreira.
    """)

# Rodar a fun√ß√£o principal
if __name__ == "__main__":
    main()